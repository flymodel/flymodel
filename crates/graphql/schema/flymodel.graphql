type Bucket {
  id: Int!
  namespace: Int!
  name: String!
  region: String!
  role: Lifecycle!
  shard: Int!
  createdAt: DateTime!
  lastModified: DateTime!
}

type CurrentPage {
  size: Int!
  page: Int!
}

"""
Implement the DateTime<Utc> scalar

The input/output is a string in RFC3339 format.
"""
scalar DateTime

enum Lifecycle {
  prod
  qa
  stage
  test
}

type Model {
  id: Int!
  namespaceId: Int!
  name: String!
  createdAt: DateTime!
  lastModified: DateTime!
  namespace: Namespace
  modelVersions(version: String, page: Page): PaginatedModelVersions!
}

type ModelVersion {
  id: Int!
  modelId: Int!
  version: String!
}

type Mutation {
  rootMutation: String!
}

type Namespace {
  id: Int!
  name: String!
  description: String!
  createdAt: DateTime!
  lastModified: DateTime!
  buckets(page: Page): PaginatedBucket!
  models(page: Page): PaginatedModels!
}

input Page {
  size: Int! = 25
  page: Int!
}

type PaginatedBucket {
  page: CurrentPage!
  totalPages: Int!
  totalItems: Int!
  data: [Bucket!]!
}

type PaginatedModelVersions {
  page: CurrentPage!
  totalPages: Int!
  totalItems: Int!
  data: [ModelVersion!]!
}

type PaginatedModels {
  page: CurrentPage!
  totalPages: Int!
  totalItems: Int!
  data: [Model!]!
}

type PaginatedNamespaces {
  page: CurrentPage!
  totalPages: Int!
  totalItems: Int!
  data: [Namespace!]!
}

type Query {
  bucket(id: [Int!], page: Page, namespace: [Int!], role: [Lifecycle!]): PaginatedBucket!
  namespace(id: [Int!], page: Page): PaginatedNamespaces!
  model(id: [Int!], page: Page, name: String, namespace: [Int!], role: [Lifecycle!]): PaginatedModels!
  _service: _Service!
}

type _Service {
  sdl: String
}

