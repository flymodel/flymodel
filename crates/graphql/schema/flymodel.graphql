enum ArchiveCompression {
  GZIP
  LZ_4
  SNAPPY
  TAR
  TZG
  UNCOMPRESSED
  ZIP
  ZSTD
}

enum ArchiveFormat {
  ARROW
  CSV
  HTML
  JPEG
  JSON
  JSONL
  MD
  MOV
  MP_4
  MSGPACK
  PARQUET
  PDF
  PNG
  TXT
  WAV
  XLS
  XML
}

type Bucket {
  id: Int!
  namespace: Int!
  name: String!
  region: String!
  role: Lifecycle!
  createdAt: DateTime!
  lastModified: DateTime!
}

type CurrentPage {
  size: Int!
  page: Int!
}

"""
Implement the DateTime<Utc> scalar

The input/output is a string in RFC3339 format.
"""
scalar DateTime

type Experiment {
  id: Int!
  versionId: Int!
  name: String!
  createdAt: DateTime!
  artifacts(page: Page): PaginatedExperimentArtifact!
}

type ExperimentArtifact {
  id: Int!
  experimentId: Int!
  versionId: Int!
  blob: Int!
  name: String!
  object: ObjectBlob!
}

"""
A scalar that can represent any JSON value.
"""
scalar JSON

enum Lifecycle {
  TEST
  QA
  STAGE
  PROD
}

type Model {
  id: Int!
  namespaceId: Int!
  name: String!
  createdAt: DateTime!
  lastModified: DateTime!
  namespace: Namespace
  versions(version: String, page: Page): PaginatedModelVersion!
  tags: [ModelTag!]!
}

type ModelArtifact {
  id: Int!
  versionId: Int!
  blob: Int!
  extra: JSON
  name: String!
  object: ObjectBlob!
}

type ModelState {
  id: Int!
  versionId: Int!
  state: Lifecycle!
  lastModified: DateTime!
  version: ModelVersion!
}

type ModelTag {
  id: Int!
  modelId: Int!
  tag: Int!
  createdAt: DateTime!
}

type ModelVersion {
  id: Int!
  modelId: Int!
  version: String!
  model: Model!
  artifacts(page: Page): PaginatedModelArtifact!
  experiments(page: Page): PaginatedExperiment!
  state: ModelState
  tags: [ModelVersionTag!]!
}

type ModelVersionTag {
  id: Int!
  versionId: Int!
  tag: Int!
  createdAt: DateTime!
}

type Mutation {
  createNamespace(name: String!, description: String): Namespace!
  deleteNamespace(id: Int!): Boolean!
  updateNamespace(id: Int!, name: String, description: String): Namespace!
  deleteBucket(id: Int!): Boolean!
  createBucket(namespace: Int!, name: String!, region: String, role: Lifecycle!): Bucket!
  createModel(namespace: Int!, name: String!): Model!
  deleteModel(id: Int!): Boolean!
  updateModel(id: Int!, name: String!): Model!
  createModelVersion(model: Int!, name: String!): ModelVersion!
  deleteModelVersion(id: Int!, hard: Boolean): Boolean!
  updateModelVersionState(id: Int!, state: Lifecycle!): ModelState!
  createExperiment(modelVersion: Int!, name: String!): Experiment!
  deleteExperiment(id: Int!, hard: Boolean): Boolean!
}

type Namespace {
  id: Int!
  name: String!
  description: String!
  createdAt: DateTime!
  lastModified: DateTime!
  buckets(page: Page): PaginatedBucket!
  models(page: Page): PaginatedModel!
}

type ObjectBlob {
  id: Int!
  bucketId: Int!
  key: String!
  versionId: String!
  size: Int!
  sha256: String!
  encode: ArchiveCompression
  format: ArchiveFormat
  createdAt: DateTime!
}

input Page {
  size: Int! = 25
  page: Int!
}

type PaginatedBucket {
  page: CurrentPage!
  totalPages: Int!
  totalItems: Int!
  data: [Bucket!]!
}

type PaginatedExperiment {
  page: CurrentPage!
  totalPages: Int!
  totalItems: Int!
  data: [Experiment!]!
}

type PaginatedExperimentArtifact {
  page: CurrentPage!
  totalPages: Int!
  totalItems: Int!
  data: [ExperimentArtifact!]!
}

type PaginatedModel {
  page: CurrentPage!
  totalPages: Int!
  totalItems: Int!
  data: [Model!]!
}

type PaginatedModelArtifact {
  page: CurrentPage!
  totalPages: Int!
  totalItems: Int!
  data: [ModelArtifact!]!
}

type PaginatedModelVersion {
  page: CurrentPage!
  totalPages: Int!
  totalItems: Int!
  data: [ModelVersion!]!
}

type PaginatedNamespace {
  page: CurrentPage!
  totalPages: Int!
  totalItems: Int!
  data: [Namespace!]!
}

type Query {
  bucket(id: [Int!], page: Page, namespace: [Int!], role: [Lifecycle!]): PaginatedBucket!
  namespace(id: [Int!], name: String, page: Page): PaginatedNamespace!
  model(id: [Int!], page: Page, name: String, namespace: [Int!], role: [Lifecycle!]): PaginatedModel!
  experiment(id: [Int!], modelId: Int, page: Page, name: String): PaginatedExperiment!
  _service: _Service!
}

type _Service {
  sdl: String
}

